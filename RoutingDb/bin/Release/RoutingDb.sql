/*
Deployment script for RoutingDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "RoutingDb"
:setvar DefaultFilePrefix "RoutingDb"
:setvar DefaultDataPath "C:\Users\bucke\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"
:setvar DefaultLogPath "C:\Users\bucke\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[Course]...';


GO
CREATE TABLE [dbo].[Course] (
    [Id]   INT           NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Student]...';


GO
CREATE TABLE [dbo].[Student] (
    [Id]   INT           NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StudentCourses]...';


GO
CREATE TABLE [dbo].[StudentCourses] (
    [Id]         INT      NOT NULL,
    [IdStudent]  INT      NOT NULL,
    [IdCourse]   INT      NOT NULL,
    [Registered] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [CU_StudentCourses_StudentCourse] UNIQUE NONCLUSTERED ([IdStudent] ASC, [IdCourse] ASC)
);


GO
PRINT N'Creating [dbo].[FK_StudentCourses_ToStudent]...';


GO
ALTER TABLE [dbo].[StudentCourses] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCourses_ToStudent] FOREIGN KEY ([IdStudent]) REFERENCES [dbo].[Student] ([Id]);


GO
PRINT N'Creating [dbo].[FK_StudentCourses_ToCourse]...';


GO
ALTER TABLE [dbo].[StudentCourses] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCourses_ToCourse] FOREIGN KEY ([IdCourse]) REFERENCES [dbo].[Course] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO dbo.Student (Id, Name)
SELECT 1, N'Pierre'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Student WHERE Id = 1)
GO

INSERT INTO dbo.Student (Id, Name)
SELECT 2, N'Paul'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Student WHERE Id = 2)
GO

INSERT INTO dbo.Student (Id, Name)
SELECT 3, N'Jacques'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Student WHERE Id = 3)
GO

INSERT INTO dbo.Student (Id, Name)
SELECT 4, N'Michou'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Student WHERE Id = 4)
GO

INSERT INTO dbo.Student (Id, Name)
SELECT 5, N'Marcel'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Student WHERE Id = 5)
GO

INSERT INTO dbo.Course(Id, Name)
SELECT 1, N'Maths'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Course WHERE Id = 1)
GO

INSERT INTO dbo.Course(Id, Name)
SELECT 2, N'Geography'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Course WHERE Id = 2)
GO

INSERT INTO dbo.Course(Id, Name)
SELECT 3, N'Biology'
WHERE NOT EXISTS (SELECT 1 FROM dbo.Course WHERE Id = 3)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[StudentCourses] WITH CHECK CHECK CONSTRAINT [FK_StudentCourses_ToStudent];

ALTER TABLE [dbo].[StudentCourses] WITH CHECK CHECK CONSTRAINT [FK_StudentCourses_ToCourse];


GO
PRINT N'Update complete.';


GO
